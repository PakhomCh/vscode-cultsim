{
    "$schema": "http://json-schema.org/draft-07/schema",
    "type": "array",
    "additionalItems": false,
    "title": "Elements",
    "description": "Elements are the nouns of the sentence. They are things that are.\n\nElements encompass two categories; cards and aspects. \n\nThe cards on the table are elements. The aspects of cards are also elements. Everything that`s represented as a card, from Lore, Books, Patrons, Influences, is an element.",
    "items": {
        "type": "object",
        "oneOf": [
            {
                "title": "Card",
                "description": "Cards are the nouns, the things you use in the game. They are, among other things, defined by a set of aspects.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                    "id"
                ],
                "properties": {
                    "comments": {
                        "$ref": "#/definitions/comments"
                    },
                    "id": {
                        "$ref": "#/definitions/id"
                    },
                    "label": {
                        "$ref": "#/definitions/label"
                    },
                    "description": {
                        "$ref": "#/definitions/description"
                    },
                    "icon": {
                        "$ref": "#/definitions/icon"
                    },
                    "induces": {
                        "$ref": "#/definitions/induces"
                    },
                    "decayTo": {
                        "$ref": "#/definitions/decayTo"
                    },
                    "verbicon": {
                        "$ref": "#/definitions/verbicon"
                    },
                    "isAspect": {
                        "$ref": "#/definitions/isAspect",
                        "const": false
                    },
                    "aspects": {
                        "$ref": "#/definitions/aspects"
                    },
                    "lifetime": {
                        "$ref": "#/definitions/lifetime"
                    },
                    "resaturate": {
                        "$ref": "#/definitions/resaturate"
                    },
                    "slots": {
                        "type": "array",
                        "description": "Elements can have multiple slots. When an element is placed into a verb tile, slots with the appropriate Action ID will appear prior to recipe start. Slots have their own properties (see the Slots section). Element slots are only available when an element is first put into a verb, and thus can only be used at the start of recipe chains. The flexibility of slots allows for craftable recipes with lots of requirements to be met by multiple cards. Element and verb slots often work to control what sorts of cards are able to get into recipe chains to prevent cases where weird elements appear in recipes.",
                        "additionalItems": false,
                        "items": {
                            "$ref": "./types/slot",
                            "allOf": [
                                {
                                    "$ref": "./types/slot"
                                }
                            ],
                            "properties": {
                                "actionid": {
                                    "type": "string",
                                    "description": "The verb name where the slot will appear when the element is inserted."
                                }
                            }
                        }
                    },
                    "isHidden": {
                        "type": "boolean",
                        "description": "Cards will always be visible when on the table, but if this is true, they will be invisible while within a recipe."
                    },
                    "unique": {
                        "type": "boolean",
                        "description": "When true, only one can be present on the board. A new one spawning will cause the old one to fade. \nAn example of this are rites. If you gain a second of the same rite, the first copy will disappear."
                    },
                    "uniquenessgroup": {
                        "type": "string",
                        "description": "A special section that stores an aspect id. Any other elements with the same aspect for their Uniqueness Group cannot exist simultaneously on the board. (Placing one onto the board will cause all others on the board to vanish, just like with the “unique” property.) The uniqueness group is technically an aspect like any other, and can be used for requirements and refinements."
                    },
                    "burnTo": {
                        "type": "string",
                        "$comment": "@TODO: Research and write description"
                    },
                    "xtriggers": {
                        "$ref": "./types/xtriggers-card"
                    }
                }
            },
            {
                "title": "Aspect",
                "description": "The aspects are special elements with fewer properties, that can be seen as metadata, or a more granular type of information we can act on.",
                "type": "object",
                "additionalProperties": false,
                "required": [
                    "id",
                    "isAspect"
                ],
                "properties": {
                    "comments": {
                        "$ref": "#/definitions/comments"
                    },
                    "id": {
                        "$ref": "#/definitions/id"
                    },
                    "label": {
                        "$ref": "#/definitions/label"
                    },
                    "description": {
                        "$ref": "#/definitions/description"
                    },
                    "icon": {
                        "$ref": "#/definitions/icon"
                    },
                    "induces": {
                        "$ref": "#/definitions/induces"
                    },
                    "decayTo": {
                        "$ref": "#/definitions/decayTo"
                    },
                    "verbicon": {
                        "$ref": "#/definitions/verbicon"
                    },
                    "isAspect": {
                        "$ref": "#/definitions/isAspect",
                        "const": true
                    },
                    "isHidden": {
                        "type": "boolean",
                        "description": "This causes the aspect not to appear on any in-game aspect lists.\nAn example of a hidden aspect is `legacyplotitem`, which does not appear on the aspect list of A Bequest, nor does it appear on the required/allowed aspect list of the Study Verb, despite it being in both lists."
                    },
                    "noartneeded": {
                        "type": "boolean",
                        "description": "This keeps the game from searching for artwork for this element, and defaults to false. This supposedly offers a small improvement to performance. In general, this should only be true if `isHidden` is true, or if this is an aspect that will only be used as a recipe aspect and XTrigger catalyst. More on XTriggers later."
                    },
                    "xtriggers": {
                        "$ref": "./types/xtriggers-aspect"
                    }
                }
            }
        ]
    },
    "definitions": {
        "id": {
            "type": "string",
            "description": "The unique identification of the element. This is used to refer to the element. If an element with this ID already exists, the properties specified will be merged with that of the existing element. This is used to modify pre-existing elements, like those from the base game."
        },
        "label": {
            "type": "string",
            "description": "The name displayed on the card. For aspects, the label is displayed when it's icon is clicked on, and it is prefixed with “Aspect: ”."
        },
        "description": {
            "type": "string",
            "description": "Shown in the top-right when the aspect/card is clicked on."
        },
        "isAspect": {
            "type": "boolean",
            "description": "For cards (“full elements”, “non aspects”), this should always be false. It defaults to false, and can be safely omitted. For aspects, this should be true. This is used by many modding tools to differentiate aspects from other elements (as the two can have very different properties), but the game only considers this value when determining where to look for the element`s art. (If the element is on a card as an aspect, the game will check “images\\aspects” only if this value is set to true. If the element is a card, or if it does not have this value as true, the game will check “images\\elements” instead.)"
        },
        "icon": {
            "type": "string",
            "description": "The name of the file for the icon of this element. Cards get their art from images/elements. Aspects get their art from images/aspects (see the isAspect property for their distinction). This value defaults to the ID of the element, and can be removed if the desired image has a filename matching the ID of the element, and is in the appropriate folder."
        },
        "induces": {
            "type": "array",
            "description": "Whenever this element is present and face-up (ie: not from effects or deckeffects) at the conclusion of a recipe chain, the induced recipe may be created as a new situation token depending on the designated chance. This will not occur if an active token with the actionId of the specified verb is already on the table, but it will ignore any requirements, extantreqs, or tablereqs associated with the induced recipe.\nExamples of inductions include the Heart aspect starting 'Course of the Heart', or the Ingredient aspect starting 'needs'.",
            "items": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                    "id",
                    "chance"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "chance": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                    }
                }
            }
        },
        "decayTo": {
            "type": "string",
            "description": "The element that this element will turn into when the lifetime reaches 0. Mutated aspects are kept through decay. (As an advanced feature, this can be applied to aspects to achieve a specific behaviour when used with Purge, but has no effect on it's own because aspects cannot decay.)\nExamples of decay elements being used include Restlessness decaying to Dread, or Health [Fatigued] decaying into Health."
        },
        "verbicon": {
            "type": "string",
            "description": "When this element is in a Verb, the Verbs icon will become the icon indicated. Note that the icon must exist in “images\\verbs”. It is currently unknown what happens when the image does not exist or more than one Verb Icon is defined."
        },
        "aspects": {
            "type": "object",
            "description": "A dictionary of aspects contained by the element, where the aspect id is associated to the amount of this aspect. They act as metadata.",
            "patternProperties": {
                ".*": {
                    "type": "integer",
                    "title": "Aspect: Amount"
                }
            }
        },
        "lifetime": {
            "type": "number",
            "description": "The card duration. When it reaches 0, it will either transform into the Decay Element, or if there isn't one, it will disappear. If this is set to 0, the element will not have a lifetime, which is the default behaviour if lifetime is omitted."
        },
        "resaturate": {
            "type": "boolean",
            "description": "Only applies to elements with lifetimes. Normally, as the lifetime reaches 0, the art will desaturate. If this value is true, the card will start desaturated and gain saturation as it reaches 0 (like depleted ability cards, such as Health [Fatigued])."
        },
        "comments": {
            "type": "string",
            "description": "Provide a comment or more not displayed in-game for you or other developers"
        }
    }
}